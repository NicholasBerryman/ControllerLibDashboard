/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arduinocontroller.UI;

import arduinocontroller.Comms.ControllerSerialInterface;
import arduinocontroller.Comms.SerialListener;
import arduinocontroller.Processing.ControllerListener;
import arduinocontroller.Processing.InterfaceController;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author Nicholas Berryman
 */
public class Dashboard extends javax.swing.JFrame {
    private final ArrayList<InterfaceController> controllers = new ArrayList<>();
    private ControllerSerialInterface controllerSerialInterface;
    private ControllerSerialInterface arduinoPort;
    private Thread controllerFindThread;
    
    /**
     * Creates new form ControllersFrame
     * @param arduinoPort
     */
    public Dashboard(ControllerSerialInterface arduinoPort) {
        this();
        this.arduinoPort = arduinoPort;
        arduinoPort.addSerialListener(new SerialListener(){
            @Override
            public void serialRecieve(String message) {
                txtRecieved.append(message);
            }
        });
        
    }
    
    public Dashboard(){
        initComponents();
        this.setLocationRelativeTo(null);
        ((DefaultCaret)txtRecieved.getCaret()).setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        controllerFindThread = new Thread(new Runnable(){
            @Override
            public void run() {
                while (true){
                    updateControllerList();
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(COMSelector.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        controllerFindThread.start();
        this.updateControllerList();
        this.setTitle("Arduino Controller Dashboard");
    }

    private void updateControllerList(){
        int selected = cmbControllerList.getSelectedIndex();
        if (!cmbControllerList.hasFocus()){
            cmbControllerList.removeAllItems();
            for (InterfaceController controller : InterfaceController.GetAllControllers()){
                if (!controllers.contains(controller)){
                    cmbControllerList.addItem(controller.getName());
                }
            }
            if (selected < cmbControllerList.getItemCount()) cmbControllerList.setSelectedIndex(selected);
        }
    }
    
    private void addController(InterfaceController toAdd){
        controllers.add(toAdd);
        ControllerPanel newPanel = new ControllerPanel(toAdd);
        toAdd.addControllerListener(new ControllerListener(){
            @Override
            public void axisChange(int axisIndex) {
                newPanel.setAxis(axisIndex, toAdd.getAxisValue(axisIndex));
            }

            @Override
            public void buttonChange(int buttonIndex) {
                newPanel.setButton(buttonIndex, toAdd.getButtonValue(buttonIndex));
            }
        });
        toAdd.startMonitoring();
        if (controllerSerialInterface != null) controllerSerialInterface.addController(toAdd);
        tbpControllers.addTab(toAdd.getName(), newPanel);
        
        if (arduinoPort != null)arduinoPort.addController(toAdd);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tbpControllers = new javax.swing.JTabbedPane();
        btnAddController = new javax.swing.JButton();
        cmbControllerList = new javax.swing.JComboBox<>();
        txtMessage = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtRecieved = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tbpControllers.setPreferredSize(new java.awt.Dimension(640, 480));

        btnAddController.setText("Add Controller");
        btnAddController.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddControllerActionPerformed(evt);
            }
        });

        cmbControllerList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        txtRecieved.setEditable(false);
        txtRecieved.setColumns(20);
        txtRecieved.setRows(5);
        jScrollPane1.setViewportView(txtRecieved);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                    .addComponent(cmbControllerList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAddController, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(txtMessage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSend)))
                .addContainerGap())
            .addComponent(tbpControllers, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tbpControllers, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSend))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbControllerList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddController)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddControllerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddControllerActionPerformed
        for (InterfaceController controller : InterfaceController.GetAllControllers()){
            if (controller.getName().equals(cmbControllerList.getSelectedItem()) && !controllers.contains(controller)){
                this.addController(controller);
                break;
            }
        }
        this.updateControllerList();
    }//GEN-LAST:event_btnAddControllerActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        if (arduinoPort != null)arduinoPort.sendMessage(txtMessage.getText());
        txtMessage.setText("");
    }//GEN-LAST:event_btnSendActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddController;
    private javax.swing.JButton btnSend;
    private javax.swing.JComboBox<String> cmbControllerList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane tbpControllers;
    private javax.swing.JTextField txtMessage;
    private javax.swing.JTextArea txtRecieved;
    // End of variables declaration//GEN-END:variables
}
